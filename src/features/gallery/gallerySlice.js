import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import toast from "react-hot-toast";
import { fetchDateRange } from "./galleryAPI";

// Date must be between Jun 16, 1995 and May 01, 2022.
const initialState = {
  status: "idle",
  monthArray: [
    {value: 0, name: "January"},
    {value: 1, name: "February"},
    {value: 2, name: "March"},
    {value: 3, name: "April"},
    {value: 4, name: "May"},
    {value: 5, name: "June"},
    {value: 6, name: "July"},
    {value: 7, name: "August"},
    {value: 8, name: "September"},
    {value: 9, name: "October"},
    {value: 10, name: "November"},
    {value: 11, name: "December"},
  ].filter((item, index) => index <= new Date().getMonth()),
  yearArray: [...Array(new Date().getFullYear() - 1994).keys()].map((i) =>
    (i + 1995).toString()
  ),
  todayDate: new Date().toISOString(),
  selectedMonth: new Date().getMonth(),
  selectedYear: new Date().getFullYear(),
  gridItems: [],
};

export const getApodMonthAsync = createAsyncThunk(
  "gallery/fetchMonth",
  async (monthObj) => {
    const today = new Date();
    const firstDay = new Date(
      monthObj.year,
      monthObj.month,
      monthObj.year === 1995 && monthObj.month === 5 ? 17 : 2
    )
      .toISOString()
      .substring(0, 10);
    const lastDay =
      today.getMonth() === monthObj.month &&
      today.getFullYear() === monthObj.year
        ? today.toISOString().substring(0, 10)
        : new Date(monthObj.year, monthObj.month + 1, 1)
            .toISOString()
            .substring(0, 10);
    const response = await fetchDateRange(firstDay, lastDay);
    if (response.status === 429) {
      toast.error("Too many pictures for you today, see you tomorrow!");
    } else if (!response.ok) {
      toast.error(response.status + ": " + response.statusText);
    }
    // The value we return becomes the `fulfilled` action payload
    return response.json();
  }
);

export const gallerySlice = createSlice({
  name: "gallery",
  initialState,
  reducers: {
    setSelectedMonth: (state, action) => {
      state.selectedMonth = action.payload;
    },
    setSelectedYear: (state, action) => {
      const today = new Date(state.todayDate);
      state.selectedYear = action.payload;
      if (state.selectedYear === today.getFullYear()) {
        state.selectedMonth = Math.min(today.getMonth(), state.selectedMonth);
      } else if (state.selectedYear === 1995) {
        state.selectedMonth = Math.max(5, state.selectedMonth);
      }
      state.monthArray = [
        {value: 0, name: "January"},
        {value: 1, name: "February"},
        {value: 2, name: "March"},
        {value: 3, name: "April"},
        {value: 4, name: "May"},
        {value: 5, name: "June"},
        {value: 6, name: "July"},
        {value: 7, name: "August"},
        {value: 8, name: "September"},
        {value: 9, name: "October"},
        {value: 10, name: "November"},
        {value: 11, name: "December"},
      ].filter(
        (item, index) =>
          !(
            (item.value > today.getMonth() &&
              today.getFullYear() === state.selectedYear) ||
            (state.selectedYear === 1995 && item.value < 5)
          )
      );
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getApodMonthAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getApodMonthAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.gridItems = [];
        action.payload.map((item, index) => state.gridItems.push(item));
      });
  },
});

export const { setSelectedMonth, setSelectedYear } = gallerySlice.actions;

export default gallerySlice.reducer;
