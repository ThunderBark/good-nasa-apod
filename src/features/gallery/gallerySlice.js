import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import toast from "react-hot-toast";
import { fetchDateRange } from "./galleryAPI";

// Date must be between Jun 16, 1995 and May 01, 2022.
const initialState = {
  status: "idle",
  monthArray: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ].filter((item, index) => index <= new Date().getMonth()),
  yearArray: [...Array(new Date().getFullYear() - 1995).keys()].map((i) =>
    (i + 1996).toString()
  ),
  todayDate: new Date(),
  selectedMonth: new Date().getMonth(),
  selectedYear: new Date().getFullYear(),
  gridItems: [],
};

export const getApodMonthAsync = createAsyncThunk(
  "gallery/fetchMonth",
  async (monthObj) => {
    const today = new Date();
    const firstDay = new Date(monthObj.year, monthObj.month, 2)
      .toISOString()
      .substring(0, 10);
    const lastDay =
      today.getMonth() === monthObj.month &&
      today.getFullYear() === monthObj.year
        ? today.toISOString().substring(0, 10)
        : new Date(monthObj.year, monthObj.month + 1, 1)
            .toISOString()
            .substring(0, 10);
    const response = await fetchDateRange(firstDay, lastDay);
    if (response.status === 429) {
      toast.error("Too many pictures for you today, see you tomorrow!");
    } else if (!response.ok) {
      toast.error(response.status + ": " + response.statusText);
    }
    // The value we return becomes the `fulfilled` action payload
    return response.json();
  }
);

export const gallerySlice = createSlice({
  name: "gallery",
  initialState,
  reducers: {
    setSelectedMonth: (state, action) => {
      state.selectedMonth = action.payload;
    },
    setSelectedYear: (state, action) => {
      state.selectedYear = action.payload;
      state.monthArray = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ].filter(
        (item, index) =>
          index <= state.todayDate.getMonth() ||
          state.todayDate.getFullYear() !== state.selectedYear
      );
      if ((state.todayDate.getFullYear() === state.selectedYear) && (state.selectedMonth > state.todayDate.getMonth())) {
        state.selectedMonth = state.todayDate.getMonth();
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getApodMonthAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getApodMonthAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.gridItems = [];
        action.payload.map((item, index) =>
          state.gridItems.push(item)
        );
      });
  },
});

export const { setSelectedMonth, setSelectedYear } = gallerySlice.actions;

export default gallerySlice.reducer;
